// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/08/2024 21:34:29"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    mux2to1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mux2to1_vlg_sample_tst(
	s,
	w0,
	w1,
	sampler_tx
);
input  s;
input [31:0] w0;
input [31:0] w1;
output sampler_tx;

reg sample;
time current_time;
always @(s or w0 or w1)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module mux2to1_vlg_check_tst (
	f,
	sampler_rx
);
input [31:0] f;
input sampler_rx;

reg [31:0] f_expected;

reg [31:0] f_prev;

reg [31:0] f_expected_prev;

reg [31:0] last_f_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	f_prev = f;
end

// update expected /o prevs

always @(trigger)
begin
	f_expected_prev = f_expected;
end


// expected f[ 31 ]
initial
begin
	f_expected[31] = 1'bX;
end 
// expected f[ 30 ]
initial
begin
	f_expected[30] = 1'bX;
end 
// expected f[ 29 ]
initial
begin
	f_expected[29] = 1'bX;
end 
// expected f[ 28 ]
initial
begin
	f_expected[28] = 1'bX;
end 
// expected f[ 27 ]
initial
begin
	f_expected[27] = 1'bX;
end 
// expected f[ 26 ]
initial
begin
	f_expected[26] = 1'bX;
end 
// expected f[ 25 ]
initial
begin
	f_expected[25] = 1'bX;
end 
// expected f[ 24 ]
initial
begin
	f_expected[24] = 1'bX;
end 
// expected f[ 23 ]
initial
begin
	f_expected[23] = 1'bX;
end 
// expected f[ 22 ]
initial
begin
	f_expected[22] = 1'bX;
end 
// expected f[ 21 ]
initial
begin
	f_expected[21] = 1'bX;
end 
// expected f[ 20 ]
initial
begin
	f_expected[20] = 1'bX;
end 
// expected f[ 19 ]
initial
begin
	f_expected[19] = 1'bX;
end 
// expected f[ 18 ]
initial
begin
	f_expected[18] = 1'bX;
end 
// expected f[ 17 ]
initial
begin
	f_expected[17] = 1'bX;
end 
// expected f[ 16 ]
initial
begin
	f_expected[16] = 1'bX;
end 
// expected f[ 15 ]
initial
begin
	f_expected[15] = 1'bX;
end 
// expected f[ 14 ]
initial
begin
	f_expected[14] = 1'bX;
end 
// expected f[ 13 ]
initial
begin
	f_expected[13] = 1'bX;
end 
// expected f[ 12 ]
initial
begin
	f_expected[12] = 1'bX;
end 
// expected f[ 11 ]
initial
begin
	f_expected[11] = 1'bX;
end 
// expected f[ 10 ]
initial
begin
	f_expected[10] = 1'bX;
end 
// expected f[ 9 ]
initial
begin
	f_expected[9] = 1'bX;
end 
// expected f[ 8 ]
initial
begin
	f_expected[8] = 1'bX;
end 
// expected f[ 7 ]
initial
begin
	f_expected[7] = 1'bX;
end 
// expected f[ 6 ]
initial
begin
	f_expected[6] = 1'bX;
end 
// expected f[ 5 ]
initial
begin
	f_expected[5] = 1'bX;
end 
// expected f[ 4 ]
initial
begin
	f_expected[4] = 1'bX;
end 
// expected f[ 3 ]
initial
begin
	f_expected[3] = 1'bX;
end 
// expected f[ 2 ]
initial
begin
	f_expected[2] = 1'bX;
end 
// expected f[ 1 ]
initial
begin
	f_expected[1] = 1'bX;
end 
// expected f[ 0 ]
initial
begin
	f_expected[0] = 1'bX;
end 
// generate trigger
always @(f_expected or f)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected f = %b | ",f_expected_prev);
	$display("| real f = %b | ",f_prev);
`endif
	if (
		( f_expected_prev[0] !== 1'bx ) && ( f_prev[0] !== f_expected_prev[0] )
		&& ((f_expected_prev[0] !== last_f_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_f_exp[0] = f_expected_prev[0];
	end
	if (
		( f_expected_prev[1] !== 1'bx ) && ( f_prev[1] !== f_expected_prev[1] )
		&& ((f_expected_prev[1] !== last_f_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_f_exp[1] = f_expected_prev[1];
	end
	if (
		( f_expected_prev[2] !== 1'bx ) && ( f_prev[2] !== f_expected_prev[2] )
		&& ((f_expected_prev[2] !== last_f_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_f_exp[2] = f_expected_prev[2];
	end
	if (
		( f_expected_prev[3] !== 1'bx ) && ( f_prev[3] !== f_expected_prev[3] )
		&& ((f_expected_prev[3] !== last_f_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_f_exp[3] = f_expected_prev[3];
	end
	if (
		( f_expected_prev[4] !== 1'bx ) && ( f_prev[4] !== f_expected_prev[4] )
		&& ((f_expected_prev[4] !== last_f_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_f_exp[4] = f_expected_prev[4];
	end
	if (
		( f_expected_prev[5] !== 1'bx ) && ( f_prev[5] !== f_expected_prev[5] )
		&& ((f_expected_prev[5] !== last_f_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_f_exp[5] = f_expected_prev[5];
	end
	if (
		( f_expected_prev[6] !== 1'bx ) && ( f_prev[6] !== f_expected_prev[6] )
		&& ((f_expected_prev[6] !== last_f_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_f_exp[6] = f_expected_prev[6];
	end
	if (
		( f_expected_prev[7] !== 1'bx ) && ( f_prev[7] !== f_expected_prev[7] )
		&& ((f_expected_prev[7] !== last_f_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_f_exp[7] = f_expected_prev[7];
	end
	if (
		( f_expected_prev[8] !== 1'bx ) && ( f_prev[8] !== f_expected_prev[8] )
		&& ((f_expected_prev[8] !== last_f_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_f_exp[8] = f_expected_prev[8];
	end
	if (
		( f_expected_prev[9] !== 1'bx ) && ( f_prev[9] !== f_expected_prev[9] )
		&& ((f_expected_prev[9] !== last_f_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_f_exp[9] = f_expected_prev[9];
	end
	if (
		( f_expected_prev[10] !== 1'bx ) && ( f_prev[10] !== f_expected_prev[10] )
		&& ((f_expected_prev[10] !== last_f_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_f_exp[10] = f_expected_prev[10];
	end
	if (
		( f_expected_prev[11] !== 1'bx ) && ( f_prev[11] !== f_expected_prev[11] )
		&& ((f_expected_prev[11] !== last_f_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_f_exp[11] = f_expected_prev[11];
	end
	if (
		( f_expected_prev[12] !== 1'bx ) && ( f_prev[12] !== f_expected_prev[12] )
		&& ((f_expected_prev[12] !== last_f_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_f_exp[12] = f_expected_prev[12];
	end
	if (
		( f_expected_prev[13] !== 1'bx ) && ( f_prev[13] !== f_expected_prev[13] )
		&& ((f_expected_prev[13] !== last_f_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_f_exp[13] = f_expected_prev[13];
	end
	if (
		( f_expected_prev[14] !== 1'bx ) && ( f_prev[14] !== f_expected_prev[14] )
		&& ((f_expected_prev[14] !== last_f_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_f_exp[14] = f_expected_prev[14];
	end
	if (
		( f_expected_prev[15] !== 1'bx ) && ( f_prev[15] !== f_expected_prev[15] )
		&& ((f_expected_prev[15] !== last_f_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_f_exp[15] = f_expected_prev[15];
	end
	if (
		( f_expected_prev[16] !== 1'bx ) && ( f_prev[16] !== f_expected_prev[16] )
		&& ((f_expected_prev[16] !== last_f_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_f_exp[16] = f_expected_prev[16];
	end
	if (
		( f_expected_prev[17] !== 1'bx ) && ( f_prev[17] !== f_expected_prev[17] )
		&& ((f_expected_prev[17] !== last_f_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_f_exp[17] = f_expected_prev[17];
	end
	if (
		( f_expected_prev[18] !== 1'bx ) && ( f_prev[18] !== f_expected_prev[18] )
		&& ((f_expected_prev[18] !== last_f_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_f_exp[18] = f_expected_prev[18];
	end
	if (
		( f_expected_prev[19] !== 1'bx ) && ( f_prev[19] !== f_expected_prev[19] )
		&& ((f_expected_prev[19] !== last_f_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_f_exp[19] = f_expected_prev[19];
	end
	if (
		( f_expected_prev[20] !== 1'bx ) && ( f_prev[20] !== f_expected_prev[20] )
		&& ((f_expected_prev[20] !== last_f_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_f_exp[20] = f_expected_prev[20];
	end
	if (
		( f_expected_prev[21] !== 1'bx ) && ( f_prev[21] !== f_expected_prev[21] )
		&& ((f_expected_prev[21] !== last_f_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_f_exp[21] = f_expected_prev[21];
	end
	if (
		( f_expected_prev[22] !== 1'bx ) && ( f_prev[22] !== f_expected_prev[22] )
		&& ((f_expected_prev[22] !== last_f_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_f_exp[22] = f_expected_prev[22];
	end
	if (
		( f_expected_prev[23] !== 1'bx ) && ( f_prev[23] !== f_expected_prev[23] )
		&& ((f_expected_prev[23] !== last_f_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_f_exp[23] = f_expected_prev[23];
	end
	if (
		( f_expected_prev[24] !== 1'bx ) && ( f_prev[24] !== f_expected_prev[24] )
		&& ((f_expected_prev[24] !== last_f_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_f_exp[24] = f_expected_prev[24];
	end
	if (
		( f_expected_prev[25] !== 1'bx ) && ( f_prev[25] !== f_expected_prev[25] )
		&& ((f_expected_prev[25] !== last_f_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_f_exp[25] = f_expected_prev[25];
	end
	if (
		( f_expected_prev[26] !== 1'bx ) && ( f_prev[26] !== f_expected_prev[26] )
		&& ((f_expected_prev[26] !== last_f_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_f_exp[26] = f_expected_prev[26];
	end
	if (
		( f_expected_prev[27] !== 1'bx ) && ( f_prev[27] !== f_expected_prev[27] )
		&& ((f_expected_prev[27] !== last_f_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_f_exp[27] = f_expected_prev[27];
	end
	if (
		( f_expected_prev[28] !== 1'bx ) && ( f_prev[28] !== f_expected_prev[28] )
		&& ((f_expected_prev[28] !== last_f_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_f_exp[28] = f_expected_prev[28];
	end
	if (
		( f_expected_prev[29] !== 1'bx ) && ( f_prev[29] !== f_expected_prev[29] )
		&& ((f_expected_prev[29] !== last_f_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_f_exp[29] = f_expected_prev[29];
	end
	if (
		( f_expected_prev[30] !== 1'bx ) && ( f_prev[30] !== f_expected_prev[30] )
		&& ((f_expected_prev[30] !== last_f_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_f_exp[30] = f_expected_prev[30];
	end
	if (
		( f_expected_prev[31] !== 1'bx ) && ( f_prev[31] !== f_expected_prev[31] )
		&& ((f_expected_prev[31] !== last_f_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_f_exp[31] = f_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module mux2to1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg s;
reg [31:0] w0;
reg [31:0] w1;
// wires                                               
wire [31:0] f;

wire sampler;                             

// assign statements (if any)                          
mux2to1 i1 (
// port map - connection between master ports and signals/registers   
	.f(f),
	.s(s),
	.w0(w0),
	.w1(w1)
);

// s
initial
begin
	s = 1'b0;
	s = #360000 1'b1;
	s = #240000 1'b0;
end 
// w0[ 31 ]
initial
begin
	w0[31] = 1'b0;
end 
// w0[ 30 ]
initial
begin
	w0[30] = 1'b0;
end 
// w0[ 29 ]
initial
begin
	w0[29] = 1'b0;
end 
// w0[ 28 ]
initial
begin
	w0[28] = 1'b1;
end 
// w0[ 27 ]
initial
begin
	w0[27] = 1'b0;
end 
// w0[ 26 ]
initial
begin
	w0[26] = 1'b0;
end 
// w0[ 25 ]
initial
begin
	w0[25] = 1'b0;
end 
// w0[ 24 ]
initial
begin
	w0[24] = 1'b1;
end 
// w0[ 23 ]
initial
begin
	w0[23] = 1'b0;
end 
// w0[ 22 ]
initial
begin
	w0[22] = 1'b0;
end 
// w0[ 21 ]
initial
begin
	w0[21] = 1'b0;
end 
// w0[ 20 ]
initial
begin
	w0[20] = 1'b1;
end 
// w0[ 19 ]
initial
begin
	w0[19] = 1'b0;
end 
// w0[ 18 ]
initial
begin
	w0[18] = 1'b0;
end 
// w0[ 17 ]
initial
begin
	w0[17] = 1'b0;
end 
// w0[ 16 ]
initial
begin
	w0[16] = 1'b1;
end 
// w0[ 15 ]
initial
begin
	w0[15] = 1'b0;
end 
// w0[ 14 ]
initial
begin
	w0[14] = 1'b0;
end 
// w0[ 13 ]
initial
begin
	w0[13] = 1'b0;
end 
// w0[ 12 ]
initial
begin
	w0[12] = 1'b1;
end 
// w0[ 11 ]
initial
begin
	w0[11] = 1'b0;
end 
// w0[ 10 ]
initial
begin
	w0[10] = 1'b0;
end 
// w0[ 9 ]
initial
begin
	w0[9] = 1'b0;
end 
// w0[ 8 ]
initial
begin
	w0[8] = 1'b1;
end 
// w0[ 7 ]
initial
begin
	w0[7] = 1'b0;
end 
// w0[ 6 ]
initial
begin
	w0[6] = 1'b0;
end 
// w0[ 5 ]
initial
begin
	w0[5] = 1'b0;
end 
// w0[ 4 ]
initial
begin
	w0[4] = 1'b1;
end 
// w0[ 3 ]
initial
begin
	w0[3] = 1'b0;
end 
// w0[ 2 ]
initial
begin
	w0[2] = 1'b0;
end 
// w0[ 1 ]
initial
begin
	w0[1] = 1'b0;
end 
// w0[ 0 ]
initial
begin
	w0[0] = 1'b1;
end 
// w1[ 31 ]
initial
begin
	w1[31] = 1'b0;
end 
// w1[ 30 ]
initial
begin
	w1[30] = 1'b0;
end 
// w1[ 29 ]
initial
begin
	w1[29] = 1'b1;
end 
// w1[ 28 ]
initial
begin
	w1[28] = 1'b0;
end 
// w1[ 27 ]
initial
begin
	w1[27] = 1'b0;
end 
// w1[ 26 ]
initial
begin
	w1[26] = 1'b0;
end 
// w1[ 25 ]
initial
begin
	w1[25] = 1'b1;
end 
// w1[ 24 ]
initial
begin
	w1[24] = 1'b0;
end 
// w1[ 23 ]
initial
begin
	w1[23] = 1'b0;
end 
// w1[ 22 ]
initial
begin
	w1[22] = 1'b0;
end 
// w1[ 21 ]
initial
begin
	w1[21] = 1'b1;
end 
// w1[ 20 ]
initial
begin
	w1[20] = 1'b0;
end 
// w1[ 19 ]
initial
begin
	w1[19] = 1'b0;
end 
// w1[ 18 ]
initial
begin
	w1[18] = 1'b0;
end 
// w1[ 17 ]
initial
begin
	w1[17] = 1'b1;
end 
// w1[ 16 ]
initial
begin
	w1[16] = 1'b0;
end 
// w1[ 15 ]
initial
begin
	w1[15] = 1'b0;
end 
// w1[ 14 ]
initial
begin
	w1[14] = 1'b0;
end 
// w1[ 13 ]
initial
begin
	w1[13] = 1'b1;
end 
// w1[ 12 ]
initial
begin
	w1[12] = 1'b0;
end 
// w1[ 11 ]
initial
begin
	w1[11] = 1'b0;
end 
// w1[ 10 ]
initial
begin
	w1[10] = 1'b0;
end 
// w1[ 9 ]
initial
begin
	w1[9] = 1'b1;
end 
// w1[ 8 ]
initial
begin
	w1[8] = 1'b0;
end 
// w1[ 7 ]
initial
begin
	w1[7] = 1'b0;
end 
// w1[ 6 ]
initial
begin
	w1[6] = 1'b0;
end 
// w1[ 5 ]
initial
begin
	w1[5] = 1'b1;
end 
// w1[ 4 ]
initial
begin
	w1[4] = 1'b0;
end 
// w1[ 3 ]
initial
begin
	w1[3] = 1'b0;
end 
// w1[ 2 ]
initial
begin
	w1[2] = 1'b0;
end 
// w1[ 1 ]
initial
begin
	w1[1] = 1'b1;
end 
// w1[ 0 ]
initial
begin
	w1[0] = 1'b0;
end 

mux2to1_vlg_sample_tst tb_sample (
	.s(s),
	.w0(w0),
	.w1(w1),
	.sampler_tx(sampler)
);

mux2to1_vlg_check_tst tb_out(
	.f(f),
	.sampler_rx(sampler)
);
endmodule

